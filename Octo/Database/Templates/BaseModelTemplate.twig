{{ "<?php" }}

/**
 * {{ table.php_name }} base model for table: {{ name }}
 */

namespace {{ itemNamespace }}\Model\Base;

use DateTime;
use Block8\Database\Query;
use Octo\Model;
use Octo\Store;
use {{ itemNamespace }}\Model\{{ table.php_name }};
use {{ itemNamespace }}\Store\{{ table.php_name }}Store;

/**
 * {{ table.php_name }} Base Model
 */
abstract class {{ table.php_name }}Base extends Model
{
    protected $table = '{{ name }}';
    protected $model = '{{ table.php_name }}';
    protected $data = [
{% for column in table.columns %}
        '{{ column.name }}' => {{ column.default_formatted|raw }},
{% endfor %}
    ];

    protected $getters = [
{% for column, method in methods %}
        '{{ column }}' => 'get{{ method }}',
{% endfor %}
    ];

    protected $setters = [
{% for column, method in methods %}
        '{{ column }}' => 'set{{ method }}',
{% endfor %}
    ];

    /**
     * Return the database store for this model.
     * @return {{ table.php_name }}Store
     */
    public static function Store() : {{ table.php_name }}Store
    {
        return {{ table.php_name }}Store::load();
    }

{% if table.primary_key %}
    /**
     * Get {{ table.php_name }} by primary key: {{ table.primary_key.name }}
     * @param {{ table.primary_key.php_type }} ${{ table.primary_key.name }}
     * @return {{ table.php_name }}|null
     */
    public static function get({{ table.primary_key.php_type }} ${{ table.primary_key.name }}) : ?{{ table.php_name }}
    {
        return self::Store()->getBy{{ table.primary_key.php_name }}(${{ table.primary_key.name }});
    }

{% endif %}
    /**
     * @throws \Exception
     * @return {{ table.php_name }}
     */
    public function save() : {{ table.php_name }}
    {
        $rtn = self::Store()->save($this);

        if (empty($rtn)) {
            throw new \Exception('Failed to save {{ table.php_name }}');
        }

        if (!($rtn instanceof {{ table.php_name }})) {
            throw new \Exception('Unexpected ' . get_class($rtn) . ' received from save.');
        }

        $this->data = $rtn->toArray();

        return $this;
    }

{% for column in table.columns %}

    /**
     * Get the value of {{ column.php_name }} / {{ column.name }}
     * @return {{ column.php_type }}
     */

     public function get{{ column.php_name }}() : {{ column.validate_null ? column.php_type : "?" ~ column.php_type }}
     {
        $rtn = $this->data['{{ column.name }}'];
{% if column.validate_date %}

        if (!empty($rtn)) {
            $rtn = new DateTime($rtn);
        }
{% endif %}
{% if column.is_json %}

        $rtn = json_decode($rtn, true);

        if ($rtn === false) {
            $rtn = null;
        }
{% endif %}

        return $rtn;
     }
    {% endfor %}

    {% for column in table.columns %}

    /**
     * Set the value of {{ column.php_name }} / {{ column.name }}
     * @param $value {{ column.php_type }}
     * @return {{ table.php_name }}
     */
{% if column.param_type != null %}    public function set{{ column.php_name }}({{ column.validate_null ? column.param_type : '?' ~ column.param_type }} $value){% elseif column.param_type == null %}    public function set{{ column.php_name }}($value){% endif %} : {{ table.php_name }}
    {
{% if column.validate_date %}        $this->validateDate('{{ column.php_name }}', $value);
{% endif %}{% if column.is_json %}        $this->validateJson($value);
{% endif %}{% if column.is_foreign_key %}

        // As this column is a foreign key, empty values should be considered null.
        if (empty($value)) {
            $value = null;
        }

{% endif %}

        if ($this->data['{{ column.name }}'] !== $value) {
            $this->data['{{ column.name }}'] = $value;
            $this->setModified('{{ column.name }}');
        }

        return $this;
    }
    {% endfor %}

    {% for item in table.relationships.toOne %}

    /**
     * Get the {{ item.table_php_name }} model for this {{ parent.table.php_name }} by {{ item.col_php }}.
     *
     * @uses \{{ getNamespace(item.table_php_name) }}\Store\{{ item.table_php_name }}Store::getBy{{ item.col_php }}()
     * @uses \{{ getNamespace(item.table_php_name) }}\Model\{{ item.table_php_name }}
     * @return \{{ getNamespace(item.table_php_name) }}\Model\{{ item.table_php_name }}
     */
    public function get{{ item.php_name }}()
    {
        $key = $this->get{{ item.from_col_php }}();

        if (empty($key)) {
           return null;
        }

        return Store::get('{{ item.table_php_name }}')->getBy{{ item.col_php }}($key);
    }

    /**
     * Set {{ item.php_name }} - Accepts an ID, an array representing a {{ item.table_php_name }} or a {{ item.table_php_name }} model.
     * @throws \Exception
     * @param $value mixed
     */
    public function set{{ item.php_name }}($value)
    {
        // Is this a scalar value representing the ID of this foreign key?
        if (is_scalar($value)) {
            return $this->set{{ item.from_col_php }}($value);
        }

        // Is this an instance of {{ item.php_name }}?
        if (is_object($value) && $value instanceof \{{ getNamespace(item.table_php_name) }}\Model\{{ item.table_php_name }}) {
            return $this->set{{ item.php_name }}Object($value);
        }

        // Is this an array representing a {{ item.table_php_name }} item?
        if (is_array($value) && !empty($value['{{ item.col }}'])) {
            return $this->set{{ item.from_col_php }}($value['{{ item.col }}']);
        }

        // None of the above? That's a problem!
        throw new \Exception('Invalid value for {{ item.php_name }}.');
    }

    /**
     * Set {{ item.php_name }} - Accepts a {{ item.table_php_name }} model.
     *
     * @param $value \{{ getNamespace(item.table_php_name) }}\Model\{{ item.table_php_name }}
     */
    public function set{{ item.php_name }}Object(\{{ getNamespace(item.table_php_name) }}\Model\{{ item.table_php_name }} $value)
    {
        return $this->set{{ item.from_col_php }}($value->get{{ item.col_php }}());
    }
{% endfor %}
{% for rel in table.relationships.toMany %}{% set fromNs = getNamespace(rel.from_php) %}{% if fromNs == "Octo\System" or fromNs == getNamespace(table.php_name) %}


    public function {{ rel.table_php }}s() : Query
    {
{% if rel.link %}
        $query = Store::get('{{ rel.table_php }}')->where('{{ rel.link.table }}.{{ rel.link.column1 }}', $this->data['{{ rel.thisCol }}']);
        $query->join('{{ rel.link.table }}', '{{ rel.link.table }}.{{ rel.link.column2 }}', '{{ rel.table }}.{{ rel.fromCol }}');
        return $query;
{% else %}
        return Store::get('{{ rel.table_php }}')->where('{{ rel.fromCol }}', $this->data['{{ rel.thisCol }}']);
{% endif %}
    }{% endif %}
{% endfor %}

}
